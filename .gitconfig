[user]
  name = Matteo Landi
  email = matteo@matteolandi.net

[core]
  pager = cat
  editor = vim

[color]
  branch = auto
  diff = auto
  status = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow
  frag = magenta
  old = red
  new = green

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[push]
    default = current

[alias]
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    stashes = stash list

    b = "!f() { git branch --color --verbose | tr -d '\\r'; }; f"
    bd = branch -d

    st = status --short --ignore-submodules=untracked
    ci = commit -v
    cm = commit -v -m
    cmm = commit --no-edit

    co = checkout
    cob = checkout -b
    com = checkout master

    mo = !git-merge-origin
    mom = !git-merge-origin master

    mr = "!f() { git com && git up && git mo \"${@}\" && git push && git bd \"${@}\"; }; f"

    peek = "!f() { git fetch && git log HEAD..FETCH_HEAD; }; f"
    peekd = "!f() { git fetch && git diff HEAD..FETCH_HEAD | vim -c 'set ft=diff' -R -; }; f"
    pretty-log = "!f() { \
        if [ \"$(git currentbranch)\" != \"master\" ]; then \
            args=master..; \
        fi; \
        git log \"${@}\" --color=always $args --date=\"$GIT_LOG_DATE\" --topo-order --pretty='tformat:%C(white bold)%h%Creset %s (%ad by %an)%C(white bold)%d%Creset'; \
    }; f"
    pl   = !git pretty-log -18
    pll  = !git pretty-log -36
    plll = !git pretty-log -72
    lv   = "!f() { \
        cmd=\"Shell git p$1\"; \
        vim -c \"execute '$cmd' | bdelete 1\"; \
    }; f"
    l    = !git pl
    ll   = !git pll
    lll  = !git plll

    graph-log = "!f() { \
        git log \"${@}\" --color=always --all --graph --date=\"$GIT_LOG_DATE\" --topo-order --pretty='tformat:%C(white bold)%h%Creset %s (%ad by %an)%C(white bold)%d%Creset'; \
    }; f"
    gl   = !git graph-log -18
    gll  = !git graph-log -36
    glll = !git graph-log -72

    ack = log --color=always --all --topo-order --pretty='tformat:%Cgreen%h%Creset %s%Cred%d%Creset %C(black bold)(by %an)%Creset' --full-history -S

    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    pu = pull --ff-only
    pur = pull --rebase

    p = push
    pf = push --force-with-lease
    root = rev-parse --show-toplevel
    currentbranch = !git rev-parse --abbrev-ref HEAD 2>/dev/null

    d  = "!f() { cd ${GIT_PREFIX:-.}; git diff -- $@ | vim -c 'set ft=diff' -R -; }; f"
    di = "!f() { cd ${GIT_PREFIX:-.}; git diff --cached -- $@ | vim -c 'set ft=diff' -R -; }; f"

    do = "!f() { git diff origin/\"${@}\".. | vim -c 'set ft=diff' -R -; }; f"
    dom = !git do master

    in = !git fetch && git graph-log --graph ..@{u}
    ind = "!f() { git fetch; git diff ..@{u} | vim -c 'set ft=diff' -R -; }; f"

    shelve = "!f() { cd ${GIT_PREFIX:-.}; git add . ; git stash; }; f"
    unshelve = "!f() { cd ${GIT_PREFIX:-.}; git stash pop; }; f"

    r = "!f() { \
        git add -p -- $@; \
    }; f"
    R = "!f() { \
        cd ${GIT_PREFIX:-.}; \
        git add -p -- $@; \
    }; f"

    unfuck-merge = reset --hard HEAD

    zip = archive -o latest.zip HEAD

    whatadded = log --diff-filter=A
    whatdeleted = log --diff-filter=D

    fuck-win = "!f() { \
        git config core.preloadindex true; \
        git config core.fscache true; \
        git config core.autocrlf true; \
        git config core.filemode false; \
    }; f"

    find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

    br-summary = "!f() { git log ${1-origin/master}.. --reverse --pretty='format:## %s%n%n%b' | vipe | cb; }; f"
    br-stat = "!f() { git diff --stat ${1-origin/master}; }; f"
    br-files = "!f() { git diff --name-only ${1-origin/master}; }; f"

[pull]
    ff = only

[merge]
    tool = vimdiff
    ; conflictstyle = diff3
    ff = false

[mergetool]
    cmd = "vim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    trustExitCode = true
    prompt = false

[difftool]
    prompt = false
    trustExitCode = true

[web]
    browser = br

[browser "br"]
    cmd = br

[rebase]
    autosquash = true
    autoStash = true
