[user]
  name = Matteo Landi
  email = matteo@matteolandi.net

[core]
  pager = cat
  editor = vim
  excludesfile = ~/.gitignore_global

[color]
  branch = auto
  diff = auto
  status = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[push]
    default = current

[alias]
    tags = tag -l
    branches = branch -a

    b = branch -v
    bd = branch -d
    bclean = "!f() { git branch --merged ${1-master} | grep -v \" ${1-master}$\" | xargs -r git branch -d; }; f"
    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

    remotes = remote -v
    shelves = stash list

    st = status --short --ignore-submodules=untracked
    ci = commit -v
    cm = commit -v -m
    cmm = commit --no-edit

    co = checkout
    cob = checkout -b

    com = checkout master
    mo = "!f() {\
        git merge origin/\"${@}\";\
    }; f"
    mom = !git mo master
    mr = "!f() { \
        git com && git up && git mo \"${@}\" && git push && git push origin :\"${@}\" && git bd \"${@}\";\
    }; f"

    pretty-log = "!f() { \
        if [ \"$(git currentbranch)\" != \"master\" ]; then \
            args=master..; \
        fi; \
        git log \"${@}\" --color=always $args --topo-order --pretty='tformat:%Cgreen%h%Creset %s%Cred%d%Creset %C(blue bold)(by %an)%Creset'; \
    }; f"
    pl   = !git pretty-log -18
    pll  = !git pretty-log -36
    plll = !git pretty-log -72
    l    = "!f() { vim -c 'execute \"Shell git pl\" | only'; }; f"
    l    = "!f() { vim -c 'execute \"Shell git pl\" | only'; }; f"
    ll   = "!f() { vim -c 'execute \"Shell git pll\" | only'; }; f"
    lll  = "!f() { vim -c 'execute \"Shell git plll\" | only'; }; f"

    gl   = log -12 --color=always --all --graph --topo-order --pretty='tformat:%Cgreen%h%Creset %s %C(blue bold)(by %an)%Creset%C(yellow bold)%d%Creset%n'
    gll  = log -24 --color=always --all --graph --topo-order --pretty='tformat:%Cgreen%h%Creset %s %C(blue bold)(%cr by %an)%Creset%C(yellow bold)%d%Creset%n'
    glll = log -36 --color=always --all --graph --topo-order --pretty='tformat:%Cgreen%h%Creset %s %C(blue bold)(%cr by %an)%Creset%C(yellow bold)%d%Creset%n'

    ack = log --color=always --all --topo-order --pretty='tformat:%Cgreen%h%Creset %s%Cred%d%Creset %C(black bold)(by %an)%Creset' --full-history -S

    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    pu = pull --ff-only
    pur = pull --rebase
    puu = !git fetch upstream && git rebase upstream/master
    pus = submodule update --init --recursive

    p = push
    pf = push --force-with-lease
    root = rev-parse --show-toplevel
    currentbranch = !git rev-parse --abbrev-ref HEAD 2>/dev/null

    d  = "!f() { cd ${GIT_PREFIX:-.}; git diff -- $@ | vim -c 'set ft=diff' -R -; }; f"
    di = "!f() { cd ${GIT_PREFIX:-.}; git diff --cached -- $@ | vim -c 'set ft=diff' -R -; }; f"
    du = diff origin/master upstream/master

    do = "!f() { git diff origin/\"${@}\".. | vim -c 'set ft=diff' -R -; }; f"
    dom = !git do master

    in = !git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}
    ind = !git fetch && git diff ..@{u}

    shelve = stash save --include-untracked
    shelver = stash save --patch
    unshelve = "!f() { \
        if git stash list | grep . >/dev/null; then \
            if ! git stash pop; then \
                if git status --short | grep '^UU '; then \
                    git mergetool && git reset && git stash drop; \
                fi; \
            fi; \
        fi; \
    }; f"

    r = "!f() { \
        git add -p -- $@; \
    }; f"
    R = "!f() { \
        cd ${GIT_PREFIX:-.}; \
        git add -p -- $@; \
    }; f"

    rb = "!f() { \
        need_stash=$(git st); \
        [ -n \"$need_stash\" ] && git stash save; \
        git rebase --interactive $@; \
        [ -n \"$need_stash\" ] && git stash pop; \
    }; f"

    rollback = reset --soft HEAD^
    unfuck-merge = reset --hard HEAD

    zip = archive -o latest.zip HEAD

    deleted = !git log --diff-filter=D --summary | vim -R -

    fuck-win = "!f() { \
        git config core.preloadindex true; \
        git config core.fscache true; \
        git config core.autocrlf true; \
        git config core.filemode false; \
        git config gc.auto 256; \
    }; f"

    save = !git add -A && git commit -m 'SAVEPOINT'
    restore = reset HEAD~1 --mixed

    cbb = !git currentbranch | cb
[pull]
    ff = only

[merge]
    tool = splice

[mergetool "splice"]
    cmd = "vim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    trustExitCode = true

[difftool]
  prompt = false
