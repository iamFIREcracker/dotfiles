# Enable bracketed-paste: https://cirw.in/blog/bracketed-paste
set enable-bracketed-paste on

# Stop, please
set bell-style none

# Enable vi editing mode
# set editing-mode vi
# Customize PS1 depending on mode (insert, command)
# $if Bash
#     set show-mode-in-prompt on
#     # set vi-ins-mode-string "\1\e[1;96m\2+\1\e[0m\2"
#     set vi-ins-mode-string "+"
#     set vi-cmd-mode-string ":"
# $endif

# Display matches for ambiguous patterns at first tab press
set show-all-if-ambiguous on
# Allows space to complete and expand !$ eg:
# $ ls Projects
# $ cd !$<space> # completes to `cd Projects`
# 2017-10-21: setting this somehow fucks up rlwrap, so I had to disable it
# Space:magic-space

# Invoke $EDITOR while inside a rlwrap'd command
$if ccl
  "\C-x\C-e": rlwrap-call-editor
$endif
$if chez
  "\C-x\C-e": rlwrap-call-editor
$endif
$if node-repl
  "\C-x\C-e": rlwrap-call-editor
  # https://stackoverflow.com/questions/21863836/using-rlwrap-with-node-js-repl-how-could-node-break-ctrl-c-not-be-interpre/21975508#21975508
  "\C-c": rlwrap-direct-keypress
$endif
$if node
  "\C-x\C-e": rlwrap-call-editor
  # https://stackoverflow.com/questions/21863836/using-rlwrap-with-node-js-repl-how-could-node-break-ctrl-c-not-be-interpre/21975508#21975508
  "\C-c": rlwrap-direct-keypress
$endif
$if racket
  "\C-x\C-e": rlwrap-call-editor
$endif
$if python
  "\C-x\C-e": rlwrap-call-editor
$endif
$if sbcl
  "\C-x\C-e": rlwrap-call-editor
$endif

# Reload this file
"\C-xr": re-read-init-file
# Pipe last command to cg with C-Enter -- my terminal generates ◊ on C-Enter
"◊": " !-1 2>&1 | strip-escapes | cg-fzf\015"
# Resume suspended program with C-Z
"\C-z": " fg\015"
# Nicer clear screen
"\C-l": " clear-screen-and-position-cursor-at-the-bottom\015"

# Keymaps for when we're in command mode (e.g., after hitting ESC)
set keymap vi-command
"gg": beginning-of-history
"G": end-of-history
"H": beginning-of-line
"L": end-of-line

set keymap vi-insert
"\C-l": "clear-screen-and-position-cursor-at-the-bottom"
