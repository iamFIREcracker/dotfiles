#!/bin/bash

set -e
set -x

LC_ALL=C
if [ -e /usr/local/bin/ctags ]; then
    CTAGS=/usr/local/bin/ctags 
else
    export LC_COLLATE=C

    CTAGS=`which ctags`
fi
FIND=`which find`

rm -f tags

# Typescript
if [ -f Gruntfile.js -a -n "$(grep grunt-tsconfig Gruntfile.js)" ]; then
    grunt tsconfig
    exit 0
elif [ -f tsconfig.json ]; then
    tsconfig .
    exit 0
fi


# Java/Maven
if [ -f pom.xml ]; then
    #unzip $JAVA_HOME/src.zip -d .dependenciesSources

    mvn dependency:unpack-dependencies \
        -Dmdep.failOnMissingClassifierArtifact=false \
        -Dclassifier=sources \
        -DincludeScope=test \
        -DoutputDirectory=.dependenciesSources

    ${CTAGS} --language-force=java --exclude=*.jar -R .

    mv tags tags1
fi


# Python
if [ -f requirements.txt ]; then
    ${CTAGS} --exclude=build --exclude=dist -R . && sed -i.bak -E -e '/^[^    ]+      [^      ]+.py   .+v$/d'

    mv tags tags1
fi

# Appcelerator
if [ -f tiapp.xml ]; then
    ${FIND} . -type f -iregex .*\.js$ \
        -not -path "./build/*" -and -not -path "./Resources/*" \
        -exec jsctags {} -f \; | sed '/^$/d' | sort > tags

    mv tags tags1
fi

# Node
if [ -f package.json ]; then
    ${FIND} . -type f -iregex .*\.js$ \
        -not -path "./node_modules/*" -and -not -path "./bower_components/*" \
        -exec jsctags {} -f \; | sed '/^$/d' | sort > tags

    mv tags tags1
fi


echo '!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/' > tags
echo '!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/' >> tags

cat tags1 tags2 | grep -Ev '^!' | grep -v 'anonymous_function' | sort >> tags

rm tags1 tags2
